Title : Deployment Of CI-CD pipeline on Cloud.


Introduction:
I'd like to share a project I recently completed that involved creating a Python-based web application using Flask, HTML, and CSS. The primary goal of this project was to display PRN numbers, names, and institute names on a web page. To make the deployment and management of this application efficient and automated, we employed several technologies and tools. Let me walk you through the project step by step.

Development Process:

1. Web Application Development:

We began the project by developing a Python-based web application using Flask, along with HTML and CSS. This web application was designed to showcase information about members, including their PRN numbers, names, and institute names.
2. Dockerization:

To ensure the application's portability and ease of deployment, we created a Docker container for it. We wrote a Dockerfile and used a Python Slim (Buster) image as the base image. This allowed us to package the application and its dependencies into a Docker container.
3. GitHub Repository:

To manage our project's code and assets efficiently, we set up a GitHub repository. All the code, including the Dockerfile and Python Flask dependencies, was pushed to this repository. This approach ensured version control and collaborative development.
4. Jenkins Automation:

For automation, we integrated Jenkins into our development workflow. Jenkins was installed on an Ubuntu Linux machine. We utilized Jenkins pipelines to automate various aspects of the project.
5. Tomcat Server Configuration:

We configured a Tomcat server on another Ubuntu Linux machine. To establish secure communication between the Jenkins machine and the Tomcat server, we set up passwordless SSH access. This involved generating an SSH key pair and copying the SSH private key to Jenkins' credentials via the web UI.

We also installed the SSH agent plugin on Jenkins to facilitate secure authentication and communication between Jenkins and the Tomcat server.

6. Docker Hub Integration:

To streamline Docker image management, we integrated Docker Hub into our Jenkins pipeline. This allowed us to build Docker images and push them to a Docker Hub repository as part of the automated deployment process.
7. Deployment:

In the final stages of the pipeline script, we used the Docker image we built earlier to run a container. This container deployment effectively hosted our web application.
Accessing the Web Application:

To access the deployed web application, all one needs to do is use the IP address of the Tomcat machine and the designated port number. Simply pasting this combination into a web browser's URL bar will allow access to the website.
Conclusion:
In summary, this project exemplifies our proficiency in web application development, containerization using Docker, CI/CD automation with Jenkins, version control through GitHub, and secure server configuration. It demonstrates our ability to orchestrate a complex development and deployment workflow, resulting in a fully functional and automated web application accessible via a web browser.




